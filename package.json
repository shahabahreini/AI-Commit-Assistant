{
  "name": "ai-commit-assistant",
  "displayName": "GitMind: Professional AI Commit Assistant",
  "description": "ðŸš€ Professional AI-powered commit message generation for Visual Studio Code. Leverage 13 different AI providers including OpenAI GPT-4o, Claude-3-5-sonnet, Gemini-2.5-flash, DeepSeek-reasoner, Grok-3, Perplexity-sonar, and 50+ models to create consistent, conventional commit messages that improve code history quality and team collaboration.",
  "version": "3.4.3",
  "publisher": "ShahabBahreiniJangjoo",
  "private": false,
  "icon": "images/logo.png",
  "engines": {
    "vscode": "^1.100.0",
    "node": ">=16.0.0"
  },
  "vsce": {
    "dependencies": false,
    "yarn": true
  },
  "categories": [
    "SCM Providers",
    "Machine Learning",
    "Formatters",
    "Other",
    "Extension Packs"
  ],
  "extensionDependencies": [
    "vscode.git"
  ],
  "activationEvents": [
    "onStartupFinished",
    "workspaceContains:.git"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "GitMind: AI Commit Assistant",
      "properties": {
        "aiCommitAssistant.apiProvider": {
          "type": "string",
          "enum": [
            "gemini",
            "huggingface",
            "ollama",
            "mistral",
            "cohere",
            "openai",
            "together",
            "openrouter",
            "anthropic",
            "copilot",
            "deepseek",
            "grok",
            "perplexity"
          ],
          "enumDescriptions": [
            "Use Google's Gemini AI for generating commit messages",
            "Use Hugging Face models for generating commit messages",
            "Use local Ollama models for generating commit messages",
            "Use Mistral AI for generating commit messages",
            "Use Cohere AI for generating commit messages",
            "Use OpenAI for generating commit messages",
            "Use Together AI for generating commit messages",
            "Use OpenRouter for accessing multiple AI models",
            "Use Anthropic Claude for generating commit messages",
            "Use GitHub Copilot for generating commit messages (no API key required)",
            "Use DeepSeek AI for generating commit messages",
            "Use Grok AI for generating commit messages",
            "Use Perplexity AI for generating commit messages"
          ],
          "default": "gemini",
          "description": "Select which AI provider to use for generating commit messages",
          "order": 1
        },
        "aiCommitAssistant.debug": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug mode to show detailed LLM responses and API interactions",
          "order": 2
        },
        "aiCommitAssistant.gemini.apiKey": {
          "type": "string",
          "markdownDescription": "API key for Google's Gemini AI [Learn more](https://aistudio.google.com/app/apikey)",
          "order": 3
        },
        "aiCommitAssistant.huggingface.apiKey": {
          "type": "string",
          "markdownDescription": "API key for Hugging Face [Learn more](https://huggingface.co/settings/tokens)",
          "order": 4
        },
        "aiCommitAssistant.huggingface.model": {
          "type": "string",
          "default": "mistralai/Mistral-7B-Instruct-v0.3",
          "description": "Model ID for Hugging Face",
          "markdownDescription": "Model ID for Hugging Face. [Learn more](https://huggingface.co/models)",
          "examples": [
            "mistralai/Mistral-7B-Instruct-v0.3",
            "facebook/bart-large-cnn",
            "microsoft/DialoGPT-medium"
          ],
          "order": 5
        },
        "aiCommitAssistant.ollama.url": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "URL for Ollama API server",
          "order": 6
        },
        "aiCommitAssistant.ollama.model": {
          "type": "string",
          "default": "phi4",
          "description": "Model name for Ollama",
          "markdownDescription": "Model name for Ollama. [Available models](https://ollama.ai/library)",
          "examples": [
            "mistral",
            "llama2",
            "codellama",
            "phi4",
            "qwen2.5-coder"
          ],
          "order": 7
        },
        "aiCommitAssistant.mistral.apiKey": {
          "type": "string",
          "markdownDescription": "API key for Mistral AI [Learn more](https://console.mistral.ai/api-keys/)",
          "order": 8
        },
        "aiCommitAssistant.mistral.model": {
          "type": "string",
          "default": "mistral-large-latest",
          "description": "Model name for Mistral AI",
          "examples": [
            "mistral-tiny",
            "mistral-small",
            "mistral-medium",
            "mistral-large-latest"
          ],
          "order": 9
        },
        "aiCommitAssistant.commit.verbose": {
          "type": "boolean",
          "default": true,
          "description": "Generate verbose commit messages with detailed descriptions. When disabled, only generates the summary line.",
          "order": 10
        },
        "aiCommitAssistant.showDiagnostics": {
          "type": "boolean",
          "default": false,
          "description": "Show model and token information before generating commit messages",
          "order": 11
        },
        "aiCommitAssistant.telemetry.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable extension telemetry to help improve GitMind. **Privacy First**: Only anonymous usage analytics are collected - no code content, file names, or personal information. You can disable this anytime while still respecting VS Code's global telemetry setting.",
          "order": 12
        },
        "aiCommitAssistant.gemini.model": {
          "type": "string",
          "enum": [
            "gemini-2.5-pro",
            "gemini-2.5-flash",
            "gemini-2.5-flash-preview-05-20",
            "gemini-2.0-flash",
            "gemini-2.0-flash-lite",
            "gemini-1.5-flash",
            "gemini-1.5-flash-8b",
            "gemini-1.5-pro",
            "gemini-2.5-flash-preview-04-17",
            "gemini-2.5-pro-exp-03-25"
          ],
          "default": "gemini-2.5-flash",
          "description": "Select which Gemini model to use",
          "enumDescriptions": [
            "Gemini 2.5 Pro - Latest Thinking Model with advanced reasoning",
            "Gemini 2.5 Flash - Efficient Thinking model with fast inference",
            "Gemini 2.5 Flash Preview (05/20) - Preview version with latest features",
            "Gemini 2.0 Flash - Multimodal model with comprehensive capabilities",
            "Gemini 2.0 Flash-Lite - Lightweight version of 2.0 Flash",
            "Gemini 1.5 Flash - Fast and efficient general model",
            "Gemini 1.5 Flash-8B - 8B parameter version for faster inference",
            "Gemini 1.5 Pro - Base model with comprehensive capabilities",
            "Gemini 2.5 Flash Preview (04/17) - Earlier preview version",
            "Gemini 2.5 Pro Preview (03/25) - Experimental preview version"
          ]
        },
        "aiCommitAssistant.cohere.apiKey": {
          "type": "string",
          "default": "",
          "description": "API key for Cohere"
        },
        "aiCommitAssistant.cohere.model": {
          "type": "string",
          "enum": [
            "command-a-03-2025",
            "command-r-08-2024",
            "command-r-plus-08-2024",
            "aya-expanse-8b",
            "aya-expanse-32b",
            "command-r7b-arabic",
            "command-r",
            "command-r-plus",
            "command",
            "command-light",
            "command-nightly"
          ],
          "enumDescriptions": [
            "Command A (Latest - High Performance)",
            "Command R (08-2024)",
            "Command R+ (08-2024)",
            "Aya Expanse 8B (Multilingual)",
            "Aya Expanse 32B (Multilingual)",
            "Command R7B Arabic",
            "Command R (Legacy)",
            "Command R+ (Legacy)",
            "Command (Legacy)",
            "Command Light (Legacy)",
            "Command Nightly (Legacy)"
          ],
          "default": "command-a-03-2025",
          "description": "Cohere model to use for generating commit messages"
        },
        "aiCommitAssistant.openai.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for OpenAI [Learn more](https://platform.openai.com/api-keys)",
          "order": 12
        },
        "aiCommitAssistant.openai.model": {
          "type": "string",
          "enum": [
            "gpt-4.1",
            "gpt-4.1-mini",
            "gpt-4.1-nano",
            "o3",
            "o4-mini",
            "o3-mini",
            "gpt-4o",
            "gpt-4o-mini",
            "gpt-4-turbo",
            "gpt-4",
            "gpt-3.5-turbo"
          ],
          "default": "gpt-4o",
          "description": "OpenAI model to use for generating commit messages",
          "enumDescriptions": [
            "GPT-4.1 - Latest model with enhanced capabilities",
            "GPT-4.1 Mini - Efficient version of GPT-4.1",
            "GPT-4.1 Nano - Ultra-efficient GPT-4.1 variant",
            "o3 - Advanced reasoning model",
            "o4-mini - Fast reasoning model",
            "o3-mini - Efficient reasoning model",
            "GPT-4o - Multimodal model with vision capabilities",
            "GPT-4o Mini - Efficient multimodal model",
            "GPT-4 Turbo - High-performance GPT-4 variant",
            "GPT-4 - Base GPT-4 model",
            "GPT-3.5 Turbo - Fast and cost-effective model"
          ],
          "order": 13
        },
        "aiCommitAssistant.promptCustomization.enabled": {
          "type": "boolean",
          "default": false,
          "description": "When enabled, shows a dialog to add custom context when generating commit messages"
        },
        "aiCommitAssistant.promptCustomization.saveLastPrompt": {
          "type": "boolean",
          "default": false,
          "description": "Save the last custom prompt and use it as default for next commit message generation"
        },
        "aiCommitAssistant.promptCustomization.lastPrompt": {
          "type": "string",
          "default": "",
          "description": "The last custom prompt used (automatically managed)"
        },
        "aiCommitAssistant.together.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for Together AI [Learn more](https://api.together.xyz/settings/api-keys)"
        },
        "aiCommitAssistant.together.model": {
          "type": "string",
          "enum": [
            "meta-llama/Llama-3.3-70B-Instruct-Turbo",
            "deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free"
          ],
          "default": "meta-llama/Llama-3.3-70B-Instruct-Turbo",
          "description": "Together AI model to use for generating commit messages"
        },
        "aiCommitAssistant.openrouter.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for OpenRouter [Learn more](https://openrouter.ai/keys)"
        },
        "aiCommitAssistant.openrouter.model": {
          "type": "string",
          "default": "google/gemma-3-27b-it:free",
          "description": "OpenRouter model to use for generating commit messages",
          "markdownDescription": "OpenRouter model to use for generating commit messages. [Learn more](https://openrouter.ai/models)"
        },
        "aiCommitAssistant.anthropic.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for Anthropic Claude [Learn more](https://console.anthropic.com/)"
        },
        "aiCommitAssistant.anthropic.model": {
          "type": "string",
          "enum": [
            "claude-opus-4",
            "claude-sonnet-4",
            "claude-sonnet-3.7",
            "claude-3-5-sonnet-20241022",
            "claude-3-5-sonnet-20240620",
            "claude-3-5-haiku-20241022",
            "claude-3-opus-20240229",
            "claude-3-sonnet-20240229",
            "claude-3-haiku-20240307"
          ],
          "enumDescriptions": [
            "Claude Opus 4 - Latest and most capable Claude model",
            "Claude Sonnet 4 - High-performance Claude 4 model",
            "Claude Sonnet 3.7 - Advanced Claude 3.7 model",
            "Claude 3.5 Sonnet (Latest) - Most capable model with enhanced reasoning",
            "Claude 3.5 Sonnet (June) - High-performance model for complex tasks",
            "Claude 3.5 Haiku - Fast and efficient for quick responses",
            "Claude 3 Opus - Most capable Claude 3 model for complex reasoning",
            "Claude 3 Sonnet - Balanced performance and speed",
            "Claude 3 Haiku - Fast and cost-effective"
          ],
          "default": "claude-opus-4",
          "description": "Anthropic Claude model to use for generating commit messages"
        },
        "aiCommitAssistant.copilot.model": {
          "type": "string",
          "enum": [
            "gpt-4o",
            "gpt-4.1",
            "gpt-4.5-preview",
            "claude-3.5-sonnet",
            "claude-3.7-sonnet",
            "claude-3.7-sonnet-thinking",
            "claude-sonnet-4",
            "claude-opus-4",
            "gemini-2.0-flash",
            "gemini-2.5-pro-preview",
            "o1-preview",
            "o3",
            "o3-mini",
            "o4-mini"
          ],
          "enumDescriptions": [
            "GPT-4o - General purpose OpenAI model",
            "GPT-4.1 - Latest general purpose OpenAI model",
            "GPT-4.5 Preview - Preview/Pro+ OpenAI model",
            "Claude 3.5 Sonnet - General purpose Anthropic model",
            "Claude 3.7 Sonnet - General purpose Anthropic model",
            "Claude 3.7 Sonnet Thinking - General purpose Anthropic model with reasoning",
            "Claude Sonnet 4 - General purpose Anthropic model",
            "Claude Opus 4 - General purpose Anthropic model",
            "Gemini 2.0 Flash - General purpose Google model",
            "Gemini 2.5 Pro Preview - Preview Google model",
            "o1 Preview - Preview OpenAI reasoning model",
            "o3 - General purpose OpenAI reasoning model",
            "o3-mini - General purpose compact OpenAI reasoning model",
            "o4-mini - Preview compact OpenAI reasoning model"
          ],
          "default": "gpt-4o",
          "description": "GitHub Copilot model to use for generating commit messages"
        },
        "aiCommitAssistant.deepseek.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for DeepSeek AI [Learn more](https://platform.deepseek.com/api_keys)"
        },
        "aiCommitAssistant.deepseek.model": {
          "type": "string",
          "enum": [
            "deepseek-chat",
            "deepseek-reasoner"
          ],
          "enumDescriptions": [
            "DeepSeek Chat - General purpose model optimized for conversation and code generation",
            "DeepSeek Reasoner - Advanced reasoning model for complex problem solving"
          ],
          "default": "deepseek-chat",
          "description": "DeepSeek model to use for generating commit messages"
        },
        "aiCommitAssistant.grok.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for Grok AI [Learn more](https://api.x.ai/)"
        },
        "aiCommitAssistant.grok.model": {
          "type": "string",
          "enum": [
            "grok-3",
            "grok-3-fast",
            "grok-3-mini",
            "grok-2",
            "grok-2-vision",
            "grok-2-mini",
            "grok-2-turbo",
            "grok-2-vision-turbo",
            "grok-2-fast",
            "grok-beta",
            "grok-vision-beta",
            "grok-image-beta",
            "grok-image-mini"
          ],
          "enumDescriptions": [
            "Grok 3 - Latest and most capable Grok model",
            "Grok 3 Fast - High-performance variant of Grok 3",
            "Grok 3 Mini - Efficient and cost-effective Grok 3",
            "Grok 2 - Advanced general purpose model",
            "Grok 2 Vision - Multimodal model with image understanding",
            "Grok 2 Mini - Compact version of Grok 2",
            "Grok 2 Turbo - High-speed variant of Grok 2",
            "Grok 2 Vision Turbo - Fast multimodal model",
            "Grok 2 Fast - Optimized for speed",
            "Grok Beta - Latest experimental features",
            "Grok Vision Beta - Experimental vision capabilities",
            "Grok Image Beta - Experimental image generation",
            "Grok Image Mini - Compact image generation model"
          ],
          "default": "grok-3",
          "description": "Grok model to use for generating commit messages"
        },
        "aiCommitAssistant.perplexity.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for Perplexity AI [Learn more](https://www.perplexity.ai/settings/api)"
        },
        "aiCommitAssistant.perplexity.model": {
          "type": "string",
          "enum": [
            "sonar-pro",
            "sonar-reasoning",
            "sonar",
            "llama-3.1-sonar-small-128k-chat",
            "llama-3.1-sonar-large-128k-chat",
            "llama-3.1-sonar-huge-128k-online",
            "llama-3.1-sonar-small-128k-online",
            "llama-3.1-sonar-large-128k-online"
          ],
          "enumDescriptions": [
            "Sonar Pro - Latest and most capable Perplexity model with advanced reasoning",
            "Sonar Reasoning - Advanced reasoning capabilities with real-time information",
            "Sonar - General purpose model with web search capabilities",
            "Llama 3.1 Sonar Small Chat - Efficient chat model (128k context)",
            "Llama 3.1 Sonar Large Chat - Large chat model (128k context)",
            "Llama 3.1 Sonar Huge Online - Largest model with real-time web access",
            "Llama 3.1 Sonar Small Online - Efficient model with real-time web access",
            "Llama 3.1 Sonar Large Online - Large model with real-time web access"
          ],
          "default": "sonar-pro",
          "description": "Perplexity model to use for generating commit messages"
        }
      }
    },
    "commands": [
      {
        "command": "ai-commit-assistant.generateCommitMessage",
        "title": "Generate AI Commit Message",
        "category": "AI Commit Assistant",
        "icon": {
          "light": "resources/light/generate.svg",
          "dark": "resources/dark/generate.svg"
        }
      },
      {
        "command": "ai-commit-assistant.toggleDebug",
        "title": "Toggle Debug Mode",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.openSettings",
        "title": "Open Settings UI",
        "category": "AI Commit Assistant",
        "icon": {
          "light": "resources/light/settings.svg",
          "dark": "resources/dark/settings.svg"
        }
      },
      {
        "command": "ai-commit-assistant.checkApiSetup",
        "title": "Check API Setup",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.checkRateLimits",
        "title": "Check Rate Limits",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.loadMistralModels",
        "title": "Load Mistral Models",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.loadHuggingFaceModels",
        "title": "Load Hugging Face Models",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.acceptInput",
        "title": "Accept Input",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.loadingIndicator",
        "title": "Generating Commit Message...",
        "category": "AI Commit Assistant",
        "icon": {
          "light": "resources/light/loading-spin.svg",
          "dark": "resources/dark/loading-spin.svg"
        }
      },
      {
        "command": "ai-commit-assistant.configureSettings",
        "title": "Configure Settings",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.cancelGeneration",
        "title": "Cancel Generation",
        "category": "AI Commit Assistant",
        "icon": {
          "light": "resources/light/close.svg",
          "dark": "resources/dark/close.svg"
        }
      },
      {
        "command": "ai-commit-assistant.clearLastPrompt",
        "title": "Clear Last Custom Prompt",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.viewLastPrompt",
        "title": "View Last Custom Prompt",
        "category": "AI Commit Assistant"
      }
    ],
    "menus": {
      "scm/title": [
        {
          "command": "ai-commit-assistant.generateCommitMessage",
          "group": "navigation@1",
          "when": "scmProvider == git && !ai-commit-assistant.isGenerating"
        },
        {
          "command": "ai-commit-assistant.cancelGeneration",
          "group": "navigation@2",
          "when": "scmProvider == git && ai-commit-assistant.isGenerating",
          "title": "Cancel AI Generation"
        },
        {
          "command": "ai-commit-assistant.openSettings",
          "group": "navigation@3",
          "when": "scmProvider == git"
        }
      ],
      "commandPalette": [
        {
          "command": "ai-commit-assistant.generateCommitMessage",
          "when": "scmProvider == git"
        },
        {
          "command": "ai-commit-assistant.configureSettings"
        },
        {
          "command": "ai-commit-assistant.toggleDebug"
        },
        {
          "command": "ai-commit-assistant.openSettings",
          "when": "scmProvider == git"
        }
      ],
      "view/title": [
        {
          "command": "ai-commit-assistant.openSettings",
          "group": "1_gitmind@1",
          "when": "scmProvider == git"
        }
      ]
    },
    "keybindings": [
      {
        "command": "ai-commit-assistant.generateCommitMessage",
        "key": "ctrl+alt+g",
        "mac": "cmd+alt+g",
        "when": "scmProvider == git"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch",
    "package": "npm run clean && npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint \"src/**/*.{ts,tsx}\"",
    "test": "vscode-test",
    "clean": "rimraf dist out",
    "prepare": "npm run compile",
    "version": "echo 'Version updated to %s'"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.6",
    "@types/node": "^22.15.31",
    "@types/sanitize-html": "^2.16.0",
    "@types/vscode": "^1.100.0",
    "@typescript-eslint/eslint-plugin": "^8.33.0",
    "@typescript-eslint/parser": "^8.33.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.4.2",
    "esbuild": "^0.25.5",
    "eslint": "^9.27.0",
    "npm-run-all": "^4.1.5",
    "rimraf": "^6.0.1",
    "typescript": "~5.8.3",
    "yarn-upgrade-all": "^0.7.5"
  },
  "dependencies": {
    "@google/generative-ai": "^0.24.1",
    "@lobehub/icons": "^2.2.0",
    "@types/axios": "^0.14.4",
    "applicationinsights": "^3.7.0",
    "axios": "^1.8.1",
    "dotenv": "^16.5.0",
    "node-fetch": "^3.3.2",
    "sanitize-html": "^2.17.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/shahabahreini/AI-Commit-Assistant.git"
  },
  "bugs": {
    "url": "https://github.com/shahabahreini/AI-Commit-Assistant/issues",
    "email": "shahab.ahreini@gmail.com"
  },
  "homepage": "https://github.com/shahabahreini/AI-Commit-Assistant#readme",
  "keywords": [
    "git",
    "commit",
    "ai",
    "artificial-intelligence",
    "commit-message-generator",
    "auto-commit",
    "smart-commits",
    "conventional-commits",
    "semantic-commits",
    "git-automation",
    "developer-productivity",
    "code-quality",
    "git-workflow",
    "ai-assistant",
    "professional-commits",
    "enterprise-ready",
    "team-collaboration",
    "commit-consistency",
    "multi-provider-ai",
    "unified-prompts",
    "standardized-prompts",
    "prompt-management",
    "custom-prompts",
    "saved-prompts",
    "prompt-reuse",
    "workflow-efficiency",
    "advanced-git",
    "repository-analysis",
    "diff-analysis",
    "staging-detection",
    "binary-file-handling",
    "git-diff-processing",
    "smart-staging",
    "conventional-format",
    "breaking-change-detection",
    "scope-detection",
    "commit-standards",
    "git-best-practices",
    "code-review",
    "software-development",
    "devops",
    "version-control",
    "git-helper",
    "commit-quality",
    "automated-commits",
    "intelligent-commits",
    "contextual-commits",
    "commit-enhancement",
    "git-integration",
    "source-control",
    "scm-integration",
    "vscode-extension",
    "vscode-git",
    "git-message",
    "commit-generator",
    "developer-tools",
    "productivity",
    "workflow-automation",
    "coding-assistant",
    "ai-tools",
    "machine-learning",
    "natural-language-processing",
    "large-language-model",
    "llm",
    "free-ai",
    "free-tier",
    "local-ai",
    "privacy-focused",
    "zero-setup",
    "github-copilot",
    "copilot-integration",
    "gemini",
    "gemini-ai",
    "gemini-2-5-pro",
    "gemini-2-5-flash",
    "gemini-2-0-flash",
    "google-ai",
    "google-gemini",
    "thinking-models",
    "reasoning-models",
    "openai",
    "gpt",
    "gpt-4o",
    "gpt-4-1",
    "gpt-4-5",
    "o3",
    "o3-mini",
    "o4-mini",
    "claude",
    "anthropic",
    "claude-opus-4",
    "claude-sonnet-4",
    "claude-3-5-sonnet",
    "claude-3-7-sonnet",
    "huggingface",
    "hf-models",
    "open-source-models",
    "ollama",
    "local-models",
    "phi4",
    "llama3-3",
    "deepseek-r1",
    "qwen3",
    "gemma3",
    "codellama",
    "mistral",
    "mistral-ai",
    "mistral-large",
    "mistral-medium",
    "mistral-small",
    "cohere",
    "command-models",
    "command-a",
    "command-r",
    "aya-expanse",
    "together",
    "together-ai",
    "llama-3-3-70b",
    "openrouter",
    "multi-model-access",
    "deepseek",
    "deepseek-ai",
    "deepseek-chat",
    "deepseek-reasoner",
    "grok",
    "grok-ai",
    "x-ai",
    "grok-3",
    "grok-3-fast",
    "grok-3-mini",
    "perplexity",
    "perplexity-ai",
    "sonar",
    "sonar-pro",
    "sonar-reasoning",
    "real-time-data",
    "web-search-models",
    "2m-context",
    "large-context",
    "128k-context",
    "200k-context",
    "massive-context",
    "advanced-reasoning",
    "cost-effective",
    "rate-limits",
    "api-management",
    "settings-management",
    "configuration-persistence",
    "api-key-management",
    "model-selection",
    "dynamic-models",
    "real-time-browsing",
    "model-comparison",
    "provider-ecosystem",
    "unified-configuration",
    "intelligent-fallback",
    "professional-workflow",
    "enterprise-deployment",
    "open-source-projects",
    "individual-developers",
    "modern-ai-models",
    "stable-configuration",
    "reliable-settings",
    "context-aware-analysis",
    "smart-diff-analysis",
    "repository-state-management",
    "merge-conflict-handling",
    "mixed-changes",
    "comprehensive-analysis",
    "token-optimization",
    "usage-analytics",
    "debug-mode",
    "diagnostic-tools",
    "performance-monitoring",
    "batch-processing",
    "manual-override",
    "edit-preservation",
    "error-handling",
    "actionable-guidance",
    "native-integration",
    "loading-indicators",
    "status-feedback",
    "user-experience",
    "quality-assurance"
  ],
  "author": {
    "name": "Shahab Bahreini",
    "email": "shahabahreini@hotmail.com",
    "url": "https://github.com/shahabahreini"
  },
  "license": "MIT",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/shahabahreini"
  },
  "badges": [
    {
      "url": "https://img.shields.io/visual-studio-marketplace/v/ShahabBahreiniJangjoo.ai-commit-assistant?style=for-the-badge&logo=visual-studio-code&color=blue",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "VS Code Marketplace Version"
    },
    {
      "url": "https://img.shields.io/visual-studio-marketplace/d/ShahabBahreiniJangjoo.ai-commit-assistant?style=for-the-badge&logo=visual-studio-code&color=green",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "Downloads"
    },
    {
      "url": "https://img.shields.io/visual-studio-marketplace/r/ShahabBahreiniJangjoo.ai-commit-assistant?style=for-the-badge&logo=visual-studio-code&color=orange",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "Rating"
    },
    {
      "url": "https://img.shields.io/github/stars/shahabahreini/AI-Commit-Assistant?style=for-the-badge&logo=github&color=yellow",
      "href": "https://github.com/shahabahreini/AI-Commit-Assistant",
      "description": "GitHub Stars"
    },
    {
      "url": "https://img.shields.io/badge/AI_Providers-13-purple?style=for-the-badge&logo=openai",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "Supported AI Providers"
    },
    {
      "url": "https://img.shields.io/badge/Models-50+-brightgreen?style=for-the-badge&logo=checkmarx",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "Supported AI Models"
    },
    {
      "url": "https://img.shields.io/badge/Free_Tier-Available-brightgreen?style=for-the-badge&logo=checkmarx",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "Free Tier Available"
    },
    {
      "url": "https://img.shields.io/badge/Context-2M_Tokens-orange?style=for-the-badge&logo=google",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "Massive Context Support"
    }
  ],
  "galleryBanner": {
    "color": "#0066cc",
    "theme": "dark"
  },
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true,
      "description": "This extension requires API keys to be configured for full functionality."
    }
  },
  "telemetry": {
    "enabled": true,
    "level": "usage",
    "description": "This extension collects anonymous usage data to improve functionality. No code content or personal information is collected.",
    "optOut": {
      "setting": "telemetry.telemetryLevel",
      "value": "off"
    }
  }
}
