{
  "name": "ai-commit-assistant",
  "displayName": "GitMind: AI Commit Assistant",
  "description": "Generate meaningful git commit messages using Free/Paid AI (Mistral, Gemini, Hugging Face, Cohere, OpenAI, Together AI, OpenRouter, or Ollama) with support for conventional commits and multiple LLM models",
  "version": "1.8.0",
  "publisher": "ShahabBahreiniJangjoo",
  "private": false,
  "icon": "images/logo.png",
  "engines": {
    "vscode": "^1.75.0"
  },
  "vsce": {
    "dependencies": false,
    "yarn": true
  },
  "volta": {
    "node": ">=16.0.0"
  },
  "categories": [
    "SCM Providers",
    "Machine Learning",
    "Formatters",
    "Other"
  ],
  "extensionDependencies": [
    "vscode.git"
  ],
  "activationEvents": [
    "onStartupFinished",
    "workspaceContains:.git"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "GitMind: AI Commit Assistant",
      "properties": {
        "aiCommitAssistant.apiProvider": {
          "type": "string",
          "enum": [
            "gemini",
            "huggingface",
            "ollama",
            "mistral",
            "cohere",
            "openai",
            "together",
            "openrouter"
          ],
          "enumDescriptions": [
            "Use Google's Gemini AI for generating commit messages",
            "Use Hugging Face models for generating commit messages",
            "Use local Ollama models for generating commit messages",
            "Use Mistral AI for generating commit messages",
            "Use Cohere AI for generating commit messages",
            "Use OpenAI for generating commit messages",
            "Use Together AI for generating commit messages",
            "Use OpenRouter for accessing multiple AI models"
          ],
          "default": "gemini",
          "description": "Select which AI provider to use for generating commit messages",
          "order": 1
        },
        "aiCommitAssistant.debug": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug mode to show detailed LLM responses and API interactions",
          "order": 2
        },
        "aiCommitAssistant.gemini.apiKey": {
          "type": "string",
          "markdownDescription": "API key for Google's Gemini AI [Learn more](https://aistudio.google.com/app/apikey)",
          "order": 3
        },
        "aiCommitAssistant.huggingface.apiKey": {
          "type": "string",
          "markdownDescription": "API key for Hugging Face [Learn more](https://huggingface.co/settings/tokens)",
          "order": 4
        },
        "aiCommitAssistant.huggingface.model": {
          "type": "string",
          "default": "mistralai/Mistral-7B-Instruct-v0.3",
          "description": "Model ID for Hugging Face",
          "markdownDescription": "Model ID for Hugging Face. [Learn more](https://huggingface.co/models)",
          "examples": [
            "mistralai/Mistral-7B-Instruct-v0.3",
            "facebook/bart-large-cnn",
            "microsoft/DialoGPT-medium"
          ],
          "order": 5
        },
        "aiCommitAssistant.ollama.url": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "URL for Ollama API server",
          "order": 6
        },
        "aiCommitAssistant.ollama.model": {
          "type": "string",
          "default": "phi4",
          "description": "Model name for Ollama",
          "markdownDescription": "Model name for Ollama. [Available models](https://ollama.ai/library)",
          "examples": [
            "mistral",
            "llama2",
            "codellama",
            "phi4",
            "qwen2.5-coder"
          ],
          "order": 7
        },
        "aiCommitAssistant.mistral.apiKey": {
          "type": "string",
          "markdownDescription": "API key for Mistral AI [Learn more](https://console.mistral.ai/api-keys/)",
          "order": 8
        },
        "aiCommitAssistant.mistral.model": {
          "type": "string",
          "default": "mistral-large-latest",
          "description": "Model name for Mistral AI",
          "examples": [
            "mistral-tiny",
            "mistral-small",
            "mistral-medium",
            "mistral-large-latest"
          ],
          "order": 9
        },
        "aiCommitAssistant.showDiagnostics": {
          "type": "boolean",
          "default": false,
          "description": "Show model and token information before generating commit messages",
          "order": 3
        },
        "aiCommitAssistant.commit.verbose": {
          "type": "boolean",
          "default": true,
          "description": "Generate verbose commit messages with detailed descriptions. When disabled, only generates the summary line.",
          "order": 10
        },
        "aiCommitAssistant.gemini.model": {
          "type": "string",
          "enum": [
            "gemini-2.5-flash-preview-04-17",
            "gemini-2.5-pro-exp-03-25",
            "gemini-2.0-flash",
            "gemini-2.0-flash-lite",
            "gemini-1.5-flash",
            "gemini-1.5-flash-8b",
            "gemini-1.5-pro"
          ],
          "default": "gemini-2.5-flash-preview-04-17",
          "description": "Select which Gemini model to use",
          "enumDescriptions": [
            "Gemini 2.5 Flash Preview (04/17) - Latest and most advanced model",
            "Gemini 2.5 Pro Preview (03/25) - Advanced model with enhanced reasoning",
            "Gemini 2.0 Flash - Fast model with high performance",
            "Gemini 2.0 Flash-Lite - Lightweight version of Gemini 2.0 Flash",
            "Gemini 1.5 Flash - Fast and efficient model",
            "Gemini 1.5 Flash-8B - 8B parameter version for faster inference",
            "Gemini 1.5 Pro - Base model with comprehensive capabilities"
          ]
        },
        "aiCommitAssistant.cohere.apiKey": {
          "type": "string",
          "default": "",
          "description": "API key for Cohere"
        },
        "aiCommitAssistant.cohere.model": {
          "type": "string",
          "enum": [
            "command",
            "command-light",
            "command-nightly",
            "command-r"
          ],
          "default": "command",
          "description": "Cohere model to use for generating commit messages"
        },
        "aiCommitAssistant.openai.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for OpenAI [Learn more](https://platform.openai.com/api-keys)",
          "order": 11
        },
        "aiCommitAssistant.openai.model": {
          "type": "string",
          "enum": [
            "gpt-4o",
            "gpt-4-turbo",
            "gpt-3.5-turbo"
          ],
          "default": "gpt-3.5-turbo",
          "description": "OpenAI model to use for generating commit messages",
          "order": 12
        },
        "aiCommitAssistant.promptCustomization.enabled": {
          "type": "boolean",
          "default": false,
          "description": "When enabled, shows a dialog to add custom context when generating commit messages"
        },
        "aiCommitAssistant.together.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for Together AI [Learn more](https://api.together.xyz/settings/api-keys)"
        },
        "aiCommitAssistant.together.model": {
          "type": "string",
          "enum": [
            "meta-llama/Llama-3.3-70B-Instruct-Turbo",
            "deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free"
          ],
          "default": "meta-llama/Llama-3.3-70B-Instruct-Turbo",
          "description": "Together AI model to use for generating commit messages"
        },
        "aiCommitAssistant.openrouter.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "API key for OpenRouter [Learn more](https://openrouter.ai/keys)"
        },
        "aiCommitAssistant.openrouter.model": {
          "type": "string",
          "default": "google/gemma-3-27b-it:free",
          "description": "OpenRouter model to use for generating commit messages",
          "markdownDescription": "OpenRouter model to use for generating commit messages. [Learn more](https://openrouter.ai/models)"
        }
      }
    },
    "commands": [
      {
        "command": "ai-commit-assistant.generateCommitMessage",
        "title": "Generate AI Commit Message",
        "category": "AI Commit Assistant",
        "icon": {
          "light": "resources/light/generate.svg",
          "dark": "resources/dark/generate.svg"
        }
      },
      {
        "command": "ai-commit-assistant.toggleDebug",
        "title": "Toggle Debug Mode",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.openSettings",
        "title": "Open Settings UI",
        "category": "AI Commit Assistant",
        "icon": {
          "light": "resources/light/settings.svg",
          "dark": "resources/dark/settings.svg"
        }
      },
      {
        "command": "ai-commit-assistant.checkApiSetup",
        "title": "Check API Setup",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.checkRateLimits",
        "title": "Check Rate Limits",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.loadMistralModels",
        "title": "Load Mistral Models",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.loadHuggingFaceModels",
        "title": "Load Hugging Face Models",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.acceptInput",
        "title": "Accept Input",
        "category": "AI Commit Assistant"
      },
      {
        "command": "ai-commit-assistant.loadingIndicator",
        "title": "Generating Commit Message...",
        "category": "AI Commit Assistant",
        "icon": {
          "light": "resources/light/loading-spin.svg",
          "dark": "resources/dark/loading-spin.svg"
        }
      }
    ],
    "menus": {
      "scm/title": [
        {
          "command": "ai-commit-assistant.generateCommitMessage",
          "group": "navigation",
          "when": "scmProvider == git && !ai-commit-assistant.isGenerating"
        },
        {
          "command": "ai-commit-assistant.loadingIndicator",
          "group": "navigation",
          "when": "scmProvider == git && ai-commit-assistant.isGenerating"
        },
        {
          "command": "ai-commit-assistant.openSettings",
          "group": "navigation",
          "when": "scmProvider == git"
        }
      ],
      "commandPalette": [
        {
          "command": "ai-commit-assistant.generateCommitMessage",
          "when": "scmProvider == git"
        },
        {
          "command": "ai-commit-assistant.configureSettings"
        },
        {
          "command": "ai-commit-assistant.toggleDebug"
        },
        {
          "command": "ai-commit-assistant.openSettings",
          "when": "scmProvider == git"
        }
      ],
      "view/title": [
        {
          "command": "ai-commit-assistant.openSettings",
          "group": "navigation",
          "when": "scmProvider == git"
        }
      ]
    },
    "keybindings": [
      {
        "command": "ai-commit-assistant.generateCommitMessage",
        "key": "ctrl+alt+g",
        "mac": "cmd+alt+g",
        "when": "scmProvider == git"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch",
    "package": "npm run clean && npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint \"src/**/*.{ts,tsx}\"",
    "test": "vscode-test",
    "clean": "rimraf dist out",
    "prepare": "npm run compile"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.11.16",
    "@types/sanitize-html": "^2.13.0",
    "@types/vscode": "^1.75.0",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "@vscode/test-cli": "^0.0.4",
    "@vscode/test-electron": "^2.3.8",
    "@vscode/vsce": "^3.2.2",
    "esbuild": "^0.20.0",
    "eslint": "^8.56.0",
    "npm-run-all": "^4.1.5",
    "rimraf": "^5.0.5",
    "typescript": "~5.3.3"
  },
  "dependencies": {
    "@google/generative-ai": "^0.1.3",
    "@types/axios": "^0.14.4",
    "axios": "^1.8.1",
    "dotenv": "^16.4.1",
    "node-fetch": "^3.3.2",
    "sanitize-html": "^2.14.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/shahabahreini/AI-Commit-Assistant.git"
  },
  "bugs": {
    "url": "https://github.com/shahabahreini/AI-Commit-Assistant/issues",
    "email": "shahab.ahreini@gmail.com"
  },
  "homepage": "https://github.com/shahabahreini/AI-Commit-Assistant#readme",
  "keywords": [
    "git",
    "commit",
    "ai",
    "artificial-intelligence",
    "gemini",
    "gemini-ai",
    "google-ai",
    "huggingface",
    "ollama",
    "mistral",
    "mistral-ai",
    "cohere",
    "openai",
    "gpt",
    "together",
    "together-ai",
    "llama",
    "conventional-commits",
    "commit-message",
    "git-message",
    "commit-generator",
    "git-automation",
    "ai-assistant",
    "semantic-commits",
    "vscode-extension",
    "vscode-git",
    "code-quality",
    "developer-tools",
    "local-ai",
    "llm",
    "large-language-model",
    "phi",
    "llama",
    "codellama",
    "git-workflow",
    "productivity"
  ],
  "author": {
    "name": "Shahab Bahreini",
    "email": "shahabahreini@hotmail.com",
    "url": "https://github.com/shahabahreini"
  },
  "license": "MIT",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/shahabahreini"
  },
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "badges": [
    {
      "url": "https://img.shields.io/visual-studio-marketplace/v/ShahabBahreiniJangjoo.ai-commit-assistant",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "VS Code Marketplace Version"
    },
    {
      "url": "https://img.shields.io/visual-studio-marketplace/d/ShahabBahreiniJangjoo.ai-commit-assistant",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "VS Code Marketplace Downloads"
    },
    {
      "url": "https://img.shields.io/visual-studio-marketplace/r/ShahabBahreiniJangjoo.ai-commit-assistant",
      "href": "https://marketplace.visualstudio.com/items?itemName=ShahabBahreiniJangjoo.ai-commit-assistant",
      "description": "Rating"
    }
  ],
  "capabilities": {
    "virtualWorkspaces": true,
    "untrustedWorkspaces": {
      "supported": true,
      "description": "This extension requires API keys to be configured for full functionality."
    }
  }
}
